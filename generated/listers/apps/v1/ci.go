/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "dt-runner/api/apps/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CiLister helps list Cis.
type CiLister interface {
	// List lists all Cis in the indexer.
	List(selector labels.Selector) (ret []*v1.Ci, err error)
	// Cis returns an object that can list and get Cis.
	Cis(namespace string) CiNamespaceLister
	CiListerExpansion
}

// ciLister implements the CiLister interface.
type ciLister struct {
	indexer cache.Indexer
}

// NewCiLister returns a new CiLister.
func NewCiLister(indexer cache.Indexer) CiLister {
	return &ciLister{indexer: indexer}
}

// List lists all Cis in the indexer.
func (s *ciLister) List(selector labels.Selector) (ret []*v1.Ci, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Ci))
	})
	return ret, err
}

// Cis returns an object that can list and get Cis.
func (s *ciLister) Cis(namespace string) CiNamespaceLister {
	return ciNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CiNamespaceLister helps list and get Cis.
type CiNamespaceLister interface {
	// List lists all Cis in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Ci, err error)
	// Get retrieves the Ci from the indexer for a given namespace and name.
	Get(name string) (*v1.Ci, error)
	CiNamespaceListerExpansion
}

// ciNamespaceLister implements the CiNamespaceLister
// interface.
type ciNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cis in the indexer for a given namespace.
func (s ciNamespaceLister) List(selector labels.Selector) (ret []*v1.Ci, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Ci))
	})
	return ret, err
}

// Get retrieves the Ci from the indexer for a given namespace and name.
func (s ciNamespaceLister) Get(name string) (*v1.Ci, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ci"), name)
	}
	return obj.(*v1.Ci), nil
}
